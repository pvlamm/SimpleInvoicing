// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransDev.Invoicing.Infrastructure.Persistance;

#nullable disable

namespace TransDev.Invoicing.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230528220453_001-Init")]
    partial class _001Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("PublicId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.AuditTrail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditTrail", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("ClientType")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("PublicId");

                    b.HasIndex("AccountId");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.ClientHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuditTrailId")
                        .HasColumnType("bigint");

                    b.Property<long>("BillingSystemAddressId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryBillingContactId")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryContactId")
                        .HasColumnType("int");

                    b.Property<long>("PrimarySystemAddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedAuditTrailId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuditTrailId");

                    b.HasIndex("BillingSystemAddressId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PrimaryBillingContactId");

                    b.HasIndex("PrimaryContactId");

                    b.HasIndex("PrimarySystemAddressId");

                    b.HasIndex("UpdatedAuditTrailId");

                    b.ToTable("ClientHistory", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.ContactHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuditTrailId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long>("SystemAddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedAuditTrailId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuditTrailId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SystemAddressId");

                    b.HasIndex("UpdatedAuditTrailId");

                    b.ToTable("ContactHistory", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Invoiced")
                        .HasColumnType("date");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("SystemPaymentTermId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContactId");

                    b.HasIndex("SystemPaymentTermId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.InvoiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL(15,5)")
                        .HasDefaultValue(0m);

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL(15,5)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL(15,5)")
                        .HasDefaultValue(0m);

                    b.Property<short>("SequenceNumber")
                        .HasColumnType("SMALLINT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ParentId");

                    b.ToTable("InvoiceDetail", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.InvoiceStatusHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuditTrailId")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte>("SystemInvoiceStatusId")
                        .HasColumnType("tinyint");

                    b.Property<long?>("UpdatedAuditTrailId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuditTrailId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SystemInvoiceStatusId");

                    b.HasIndex("UpdatedAuditTrailId");

                    b.ToTable("InvoiceStatusHistory", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.ItemHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuditTrailId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedAuditTrailId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuditTrailId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UpdatedAuditTrailId");

                    b.ToTable("ItemHistory", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.SystemAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemStateId")
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("SystemStateId");

                    b.ToTable("SystemAddress", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.SystemInvoiceStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<short>("StatusType")
                        .HasColumnType("SMALLINT");

                    b.HasKey("Id");

                    b.ToTable("SystemInvoiceStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Description = "For Invoices not ready Invoicing",
                            Name = "Detailing",
                            StatusType = (short)0
                        },
                        new
                        {
                            Id = (byte)1,
                            Description = "Invoice is ready for Invoicing",
                            Name = "Opened",
                            StatusType = (short)10
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "This item has been Invoiced",
                            Name = "Invoiced",
                            StatusType = (short)20
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "Invoice has been paid in full",
                            Name = "Closed",
                            StatusType = (short)30
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "Invoice has been cancelled",
                            Name = "Cancelled",
                            StatusType = (short)100
                        });
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.SystemPaymentTerm", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<short>("DueInDays")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("SystemPaymentTerm", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            DueInDays = (short)30,
                            Name = "Due in 30"
                        },
                        new
                        {
                            Id = (byte)2,
                            DueInDays = (short)60,
                            Name = "Due in 60"
                        },
                        new
                        {
                            Id = (byte)3,
                            DueInDays = (short)90,
                            Name = "Due in 90"
                        });
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.SystemState", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("Id");

                    b.ToTable("SystemState", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "AL",
                            Name = "Alabama"
                        },
                        new
                        {
                            Id = "AK",
                            Name = "Alaska"
                        },
                        new
                        {
                            Id = "AS",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = "AZ",
                            Name = "Arizona"
                        },
                        new
                        {
                            Id = "AR",
                            Name = "Arkansas"
                        },
                        new
                        {
                            Id = "CA",
                            Name = "California"
                        },
                        new
                        {
                            Id = "CO",
                            Name = "Colorado"
                        },
                        new
                        {
                            Id = "CT",
                            Name = "Connecticut"
                        },
                        new
                        {
                            Id = "DE",
                            Name = "Delaware"
                        },
                        new
                        {
                            Id = "DC",
                            Name = "District Of Columbia"
                        },
                        new
                        {
                            Id = "FM",
                            Name = "Federated States Of Micronesia"
                        },
                        new
                        {
                            Id = "FL",
                            Name = "Florida"
                        },
                        new
                        {
                            Id = "GA",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = "GU",
                            Name = "Guam"
                        },
                        new
                        {
                            Id = "HI",
                            Name = "Hawaii"
                        },
                        new
                        {
                            Id = "ID",
                            Name = "Idaho"
                        },
                        new
                        {
                            Id = "IL",
                            Name = "Illinois"
                        },
                        new
                        {
                            Id = "IN",
                            Name = "Indiana"
                        },
                        new
                        {
                            Id = "IA",
                            Name = "Iowa"
                        },
                        new
                        {
                            Id = "KS",
                            Name = "Kansas"
                        },
                        new
                        {
                            Id = "KY",
                            Name = "Kentucky"
                        },
                        new
                        {
                            Id = "LA",
                            Name = "Louisiana"
                        },
                        new
                        {
                            Id = "ME",
                            Name = "Maine"
                        },
                        new
                        {
                            Id = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = "MD",
                            Name = "Maryland"
                        },
                        new
                        {
                            Id = "MA",
                            Name = "Massachusetts"
                        },
                        new
                        {
                            Id = "MI",
                            Name = "Michigan"
                        },
                        new
                        {
                            Id = "MN",
                            Name = "Minnesota"
                        },
                        new
                        {
                            Id = "MS",
                            Name = "Mississippi"
                        },
                        new
                        {
                            Id = "MO",
                            Name = "Missouri"
                        },
                        new
                        {
                            Id = "MT",
                            Name = "Montana"
                        },
                        new
                        {
                            Id = "NE",
                            Name = "Nebraska"
                        },
                        new
                        {
                            Id = "NV",
                            Name = "Nevada"
                        },
                        new
                        {
                            Id = "NH",
                            Name = "New Hampshire"
                        },
                        new
                        {
                            Id = "NJ",
                            Name = "New Jersey"
                        },
                        new
                        {
                            Id = "NM",
                            Name = "New Mexico"
                        },
                        new
                        {
                            Id = "NY",
                            Name = "New York"
                        },
                        new
                        {
                            Id = "NC",
                            Name = "North Carolina"
                        },
                        new
                        {
                            Id = "ND",
                            Name = "North Dakota"
                        },
                        new
                        {
                            Id = "MP",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Id = "OH",
                            Name = "Ohio"
                        },
                        new
                        {
                            Id = "OK",
                            Name = "Oklahoma"
                        },
                        new
                        {
                            Id = "OR",
                            Name = "Oregon"
                        },
                        new
                        {
                            Id = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = "PA",
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            Id = "PR",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = "RI",
                            Name = "Rhode Island"
                        },
                        new
                        {
                            Id = "SC",
                            Name = "South Carolina"
                        },
                        new
                        {
                            Id = "SD",
                            Name = "South Dakota"
                        },
                        new
                        {
                            Id = "TN",
                            Name = "Tennessee"
                        },
                        new
                        {
                            Id = "TX",
                            Name = "Texas"
                        },
                        new
                        {
                            Id = "UT",
                            Name = "Utah"
                        },
                        new
                        {
                            Id = "VT",
                            Name = "Vermont"
                        },
                        new
                        {
                            Id = "VI",
                            Name = "Virgin Islands"
                        },
                        new
                        {
                            Id = "VA",
                            Name = "Virginia"
                        },
                        new
                        {
                            Id = "WA",
                            Name = "Washington"
                        },
                        new
                        {
                            Id = "WV",
                            Name = "West Virginia"
                        },
                        new
                        {
                            Id = "WI",
                            Name = "Wisconsin"
                        },
                        new
                        {
                            Id = "WY",
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.SystemUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("04ec7681-5072-4ee4-b7d1-9944791d2c82"));

                    b.HasKey("Id");

                    b.ToTable("SystemUser", (string)null);
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Client", b =>
                {
                    b.HasOne("TransDev.Invoicing.Domain.Entities.Account", "Account")
                        .WithMany("Clients")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.ClientHistory", b =>
                {
                    b.HasOne("TransDev.Invoicing.Domain.Entities.AuditTrail", "AuditTrail")
                        .WithMany()
                        .HasForeignKey("AuditTrailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.SystemAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingSystemAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.Client", "Parent")
                        .WithMany("History")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.Contact", "PrimaryBillingContact")
                        .WithMany()
                        .HasForeignKey("PrimaryBillingContactId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.Contact", "PrimaryContact")
                        .WithMany()
                        .HasForeignKey("PrimaryContactId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.SystemAddress", "PrimaryAddress")
                        .WithMany()
                        .HasForeignKey("PrimarySystemAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.AuditTrail", "UpdatedAuditTrail")
                        .WithMany()
                        .HasForeignKey("UpdatedAuditTrailId");

                    b.Navigation("AuditTrail");

                    b.Navigation("BillingAddress");

                    b.Navigation("Parent");

                    b.Navigation("PrimaryAddress");

                    b.Navigation("PrimaryBillingContact");

                    b.Navigation("PrimaryContact");

                    b.Navigation("UpdatedAuditTrail");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Contact", b =>
                {
                    b.HasOne("TransDev.Invoicing.Domain.Entities.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.ContactHistory", b =>
                {
                    b.HasOne("TransDev.Invoicing.Domain.Entities.AuditTrail", "AuditTrail")
                        .WithMany()
                        .HasForeignKey("AuditTrailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.Contact", "Parent")
                        .WithMany("History")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.SystemAddress", "Address")
                        .WithMany()
                        .HasForeignKey("SystemAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.AuditTrail", "UpdatedAuditTrail")
                        .WithMany()
                        .HasForeignKey("UpdatedAuditTrailId");

                    b.Navigation("Address");

                    b.Navigation("AuditTrail");

                    b.Navigation("Parent");

                    b.Navigation("UpdatedAuditTrail");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("TransDev.Invoicing.Domain.Entities.Account", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.SystemPaymentTerm", "SystemPaymentTerm")
                        .WithMany()
                        .HasForeignKey("SystemPaymentTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Client");

                    b.Navigation("Contact");

                    b.Navigation("SystemPaymentTerm");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("TransDev.Invoicing.Domain.Entities.ItemHistory", "Item")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.Invoice", "Parent")
                        .WithMany("Details")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.InvoiceStatusHistory", b =>
                {
                    b.HasOne("TransDev.Invoicing.Domain.Entities.AuditTrail", "AuditTrail")
                        .WithMany()
                        .HasForeignKey("AuditTrailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.Invoice", "Parent")
                        .WithMany("StatusHistory")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.SystemInvoiceStatus", "Status")
                        .WithMany()
                        .HasForeignKey("SystemInvoiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.AuditTrail", "UpdatedAuditTrail")
                        .WithMany()
                        .HasForeignKey("UpdatedAuditTrailId");

                    b.Navigation("AuditTrail");

                    b.Navigation("Parent");

                    b.Navigation("Status");

                    b.Navigation("UpdatedAuditTrail");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Item", b =>
                {
                    b.HasOne("TransDev.Invoicing.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.ItemHistory", b =>
                {
                    b.HasOne("TransDev.Invoicing.Domain.Entities.AuditTrail", "AuditTrail")
                        .WithMany()
                        .HasForeignKey("AuditTrailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.Item", "Parent")
                        .WithMany("History")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TransDev.Invoicing.Domain.Entities.AuditTrail", "UpdatedAuditTrail")
                        .WithMany()
                        .HasForeignKey("UpdatedAuditTrailId");

                    b.Navigation("AuditTrail");

                    b.Navigation("Parent");

                    b.Navigation("UpdatedAuditTrail");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.SystemAddress", b =>
                {
                    b.HasOne("TransDev.Invoicing.Domain.Entities.SystemState", "State")
                        .WithMany()
                        .HasForeignKey("SystemStateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Account", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Client", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("History");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Contact", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.Item", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("TransDev.Invoicing.Domain.Entities.ItemHistory", b =>
                {
                    b.Navigation("InvoiceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
