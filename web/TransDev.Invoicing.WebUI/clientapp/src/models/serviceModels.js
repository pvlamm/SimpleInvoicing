/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
export class AuthenticationClient {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }
    /**
     * @return System User Authentication. Response includes a JWT token to authorize future requests.
     */
    authenticate(query) {
        let url_ = this.baseUrl + "/api/Authentication/Authenticate";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(query);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAuthenticate(_response);
        });
    }
    processAuthenticate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = AuthenticateUserQuery.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = SerializableException.fromJS(resultData400);
                return throwException("User not authorized. Returns exception details.", status, _responseText, _headers, result400);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class ItemClient {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }
    /**
     * @return Item successfully Created in the System
     */
    createItem(command) {
        let url_ = this.baseUrl + "/api/Item/CreateItem";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(command);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateItem(_response);
        });
    }
    processCreateItem(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CreateItemResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = SerializableException.fromJS(resultData400);
                return throwException("Error was thrown", status, _responseText, _headers, result400);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return Active Item List Lookup
     */
    searchActiveItems(query) {
        let url_ = this.baseUrl + "/api/Item/SearchActiveItems";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(query);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processSearchActiveItems(_response);
        });
    }
    processSearchActiveItems(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GetActiveItemsResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = SerializableException.fromJS(resultData400);
                return throwException("Error was thrown", status, _responseText, _headers, result400);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return Get Item History by Code or Id
     */
    getItemHistory(query) {
        let url_ = this.baseUrl + "/api/Item/GetItemHistory";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(query);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetItemHistory(_response);
        });
    }
    processGetItemHistory(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GetActiveItemsResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = SerializableException.fromJS(resultData400);
                return throwException("Error was thrown", status, _responseText, _headers, result400);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return Get Item History by Code or Id
     */
    deleteItemById(itemId) {
        let url_ = this.baseUrl + "/api/Item/DeleteItemById";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(itemId);
        let options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteItemById(_response);
        });
    }
    processDeleteItemById(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = SerializableException.fromJS(resultData400);
                return throwException("Error was thrown", status, _responseText, _headers, result400);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class WeatherForecastClient {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }
    get() {
        let url_ = this.baseUrl + "/api/WeatherForecast/Get";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(WeatherForecast.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class AccountClient {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }
    /**
     * Handles user sign in.
     * @param scheme Authentication scheme.
     * @param redirectUri (optional) Redirect URI.
     * @return Challenge generating a redirect to Azure AD to sign in the user.
     */
    signIn(scheme, redirectUri) {
        let url_ = this.baseUrl + "/MicrosoftIdentity/Account/SignIn/{scheme}?";
        if (scheme === undefined || scheme === null)
            throw new Error("The parameter 'scheme' must be defined.");
        url_ = url_.replace("{scheme}", encodeURIComponent("" + scheme));
        if (redirectUri !== undefined && redirectUri !== null)
            url_ += "redirectUri=" + encodeURIComponent("" + redirectUri) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processSignIn(_response);
        });
    }
    processSignIn(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Challenges the user.
     * @param redirectUri (optional) Redirect URI.
     * @param scope (optional) Scopes to request.
     * @param loginHint (optional) Login hint.
     * @param domainHint (optional) Domain hint.
     * @param claims (optional) Claims.
     * @param policy (optional) AAD B2C policy.
     * @param scheme Authentication scheme.
     * @return Challenge generating a redirect to Azure AD to sign in the user.
     */
    challenge(redirectUri, scope, loginHint, domainHint, claims, policy, scheme) {
        let url_ = this.baseUrl + "/MicrosoftIdentity/Account/Challenge/{scheme}?";
        if (scheme === undefined || scheme === null)
            throw new Error("The parameter 'scheme' must be defined.");
        url_ = url_.replace("{scheme}", encodeURIComponent("" + scheme));
        if (redirectUri !== undefined && redirectUri !== null)
            url_ += "redirectUri=" + encodeURIComponent("" + redirectUri) + "&";
        if (scope !== undefined && scope !== null)
            url_ += "scope=" + encodeURIComponent("" + scope) + "&";
        if (loginHint !== undefined && loginHint !== null)
            url_ += "loginHint=" + encodeURIComponent("" + loginHint) + "&";
        if (domainHint !== undefined && domainHint !== null)
            url_ += "domainHint=" + encodeURIComponent("" + domainHint) + "&";
        if (claims !== undefined && claims !== null)
            url_ += "claims=" + encodeURIComponent("" + claims) + "&";
        if (policy !== undefined && policy !== null)
            url_ += "policy=" + encodeURIComponent("" + policy) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processChallenge(_response);
        });
    }
    processChallenge(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Handles the user sign-out.
     * @param scheme Authentication scheme.
     * @return Sign out result.
     */
    signOut(scheme) {
        let url_ = this.baseUrl + "/MicrosoftIdentity/Account/SignOut/{scheme}";
        if (scheme === undefined || scheme === null)
            throw new Error("The parameter 'scheme' must be defined.");
        url_ = url_.replace("{scheme}", encodeURIComponent("" + scheme));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processSignOut(_response);
        });
    }
    processSignOut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * In B2C applications handles the Reset password policy.
     * @param scheme Authentication scheme.
     * @return Challenge generating a redirect to Azure AD B2C.
     */
    resetPassword(scheme) {
        let url_ = this.baseUrl + "/MicrosoftIdentity/Account/ResetPassword/{scheme}";
        if (scheme === undefined || scheme === null)
            throw new Error("The parameter 'scheme' must be defined.");
        url_ = url_.replace("{scheme}", encodeURIComponent("" + scheme));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processResetPassword(_response);
        });
    }
    processResetPassword(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * In B2C applications, handles the Edit Profile policy.
     * @param scheme Authentication scheme.
     * @return Challenge generating a redirect to Azure AD B2C.
     */
    editProfile(scheme) {
        let url_ = this.baseUrl + "/MicrosoftIdentity/Account/EditProfile/{scheme}";
        if (scheme === undefined || scheme === null)
            throw new Error("The parameter 'scheme' must be defined.");
        url_ = url_.replace("{scheme}", encodeURIComponent("" + scheme));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processEditProfile(_response);
        });
    }
    processEditProfile(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class AuthenticateUserQuery {
    username;
    password;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : null;
            this.password = _data["password"] !== undefined ? _data["password"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateUserQuery();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : null;
        data["password"] = this.password !== undefined ? this.password : null;
        return data;
    }
}
export class SerializableException {
    message;
    stackTrace;
    inner;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.stackTrace = _data["stackTrace"] !== undefined ? _data["stackTrace"] : null;
            if (Array.isArray(_data["inner"])) {
                this.inner = [];
                for (let item of _data["inner"])
                    this.inner.push(SerializableException.fromJS(item));
            }
            else {
                this.inner = null;
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SerializableException();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message !== undefined ? this.message : null;
        data["stackTrace"] = this.stackTrace !== undefined ? this.stackTrace : null;
        if (Array.isArray(this.inner)) {
            data["inner"] = [];
            for (let item of this.inner)
                data["inner"].push(item.toJSON());
        }
        return data;
    }
}
export class ResponseBase {
    isSuccess;
    message;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ResponseBase' cannot be instantiated.");
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : null;
        data["message"] = this.message !== undefined ? this.message : null;
        return data;
    }
}
export class CreateItemResponse extends ResponseBase {
    constructor(data) {
        super(data);
    }
    init(_data) {
        super.init(_data);
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateItemResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}
export class CreateItemCommand {
    item;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.item = _data["item"] ? ItemDto.fromJS(_data["item"]) : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateItemCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : null;
        return data;
    }
}
export class ItemDto {
    id;
    code;
    type;
    description;
    price;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.code = _data["code"] !== undefined ? _data["code"] : null;
            this.type = _data["type"] !== undefined ? _data["type"] : null;
            this.description = _data["description"] !== undefined ? _data["description"] : null;
            this.price = _data["price"] !== undefined ? _data["price"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ItemDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["code"] = this.code !== undefined ? this.code : null;
        data["type"] = this.type !== undefined ? this.type : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["price"] = this.price !== undefined ? this.price : null;
        return data;
    }
}
/** 0 = Labor */
export var ItemType;
(function (ItemType) {
    ItemType[ItemType["Labor"] = 0] = "Labor";
})(ItemType || (ItemType = {}));
export class GetActiveItemsResponse extends ResponseBase {
    items;
    constructor(data) {
        super(data);
        if (!data) {
            this.items = [];
        }
    }
    init(_data) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(ItemDto.fromJS(item));
            }
            else {
                this.items = null;
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetActiveItemsResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}
export class GetActiveItemsQuery {
    searchQuery;
    pageSize;
    page;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.searchQuery = _data["searchQuery"] !== undefined ? _data["searchQuery"] : null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : null;
            this.page = _data["page"] !== undefined ? _data["page"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetActiveItemsQuery();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["searchQuery"] = this.searchQuery !== undefined ? this.searchQuery : null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        data["page"] = this.page !== undefined ? this.page : null;
        return data;
    }
}
export class GetItemHistoryQuery {
    code;
    id;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.code = _data["code"] !== undefined ? _data["code"] : null;
            this.id = _data["id"] !== undefined ? _data["id"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetItemHistoryQuery();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code !== undefined ? this.code : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data;
    }
}
export class WeatherForecast {
    date;
    temperatureC;
    temperatureF;
    summary;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : null;
            this.temperatureC = _data["temperatureC"] !== undefined ? _data["temperatureC"] : null;
            this.temperatureF = _data["temperatureF"] !== undefined ? _data["temperatureF"] : null;
            this.summary = _data["summary"] !== undefined ? _data["summary"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : null;
        data["temperatureC"] = this.temperatureC !== undefined ? this.temperatureC : null;
        data["temperatureF"] = this.temperatureF !== undefined ? this.temperatureF : null;
        data["summary"] = this.summary !== undefined ? this.summary : null;
        return data;
    }
}
export class ApiException extends Error {
    message;
    status;
    response;
    headers;
    result;
    constructor(message, status, response, headers, result) {
        super();
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    isApiException = true;
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
//# sourceMappingURL=serviceModels.js.map